{"version":3,"file":"authService-DJzAVVpJ.js","sources":["../../src/services/supabaseService.ts","../../src/services/authService.ts"],"sourcesContent":["import { createClient, SupabaseClient } from '@supabase/supabase-js';\n\n// Default values for Supabase\nconst DEFAULT_SUPABASE_URL = 'https://anpmiebatvfzfexxzobr.supabase.co';\nconst DEFAULT_SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFucG1pZWJhdHZmemZleHh6b2JyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MTc0NTk5NzcsImV4cCI6MjAzMzAzNTk3N30.Nh0Qs9OYrOWrXyB-XUO9Oe_DwN_-LQPliMFlXEBUo8A';\n\n// Get environment variables\nconst getSupabaseUrl = (): string => {\n  // Try window.ENV_CONFIG first (for production builds)\n  if (typeof window !== 'undefined' && (window as any).ENV_CONFIG?.SUPABASE_URL) {\n    return (window as any).ENV_CONFIG.SUPABASE_URL;\n  }\n\n  // Then try window.ENV (for compatibility)\n  if (typeof window !== 'undefined' && (window as any).ENV?.VITE_SUPABASE_URL) {\n    return (window as any).ENV.VITE_SUPABASE_URL;\n  }\n\n  // Then try import.meta.env (for development)\n  if (import.meta.env.VITE_SUPABASE_URL) {\n    return import.meta.env.VITE_SUPABASE_URL;\n  }\n\n  console.warn('Supabase URL not found in environment variables, using default');\n  return DEFAULT_SUPABASE_URL;\n};\n\nconst getSupabaseAnonKey = (): string => {\n  // Try window.ENV_CONFIG first (for production builds)\n  if (typeof window !== 'undefined' && (window as any).ENV_CONFIG?.SUPABASE_ANON_KEY) {\n    return (window as any).ENV_CONFIG.SUPABASE_ANON_KEY;\n  }\n\n  // Then try window.ENV (for compatibility)\n  if (typeof window !== 'undefined' && (window as any).ENV?.VITE_SUPABASE_ANON_KEY) {\n    return (window as any).ENV.VITE_SUPABASE_ANON_KEY;\n  }\n\n  // Then try import.meta.env (for development)\n  if (import.meta.env.VITE_SUPABASE_ANON_KEY) {\n    return import.meta.env.VITE_SUPABASE_ANON_KEY;\n  }\n\n  console.warn('Supabase Anon Key not found in environment variables, using default');\n  return DEFAULT_SUPABASE_ANON_KEY;\n};\n\n// Create a singleton Supabase client\nlet supabaseInstance: SupabaseClient | null = null;\n\nexport const getSupabaseClient = (): SupabaseClient => {\n  if (supabaseInstance) {\n    return supabaseInstance;\n  }\n\n  try {\n    const supabaseUrl = getSupabaseUrl();\n    const supabaseAnonKey = getSupabaseAnonKey();\n\n    supabaseInstance = createClient(supabaseUrl, supabaseAnonKey, {\n      auth: {\n        autoRefreshToken: true,\n        persistSession: true,\n        detectSessionInUrl: true\n      },\n      global: {\n        headers: {\n          'X-Client-Info': 'EchoMind/1.0.0',\n        },\n      },\n    });\n\n    return supabaseInstance;\n  } catch (error) {\n    console.error('Error initializing Supabase client:', error);\n    throw error;\n  }\n};\n\n// Helper function to handle Supabase errors\nexport const handleSupabaseError = (error: any): string => {\n  console.error('Supabase error:', error);\n\n  if (error.message) {\n    return error.message;\n  }\n\n  if (error.error_description) {\n    return error.error_description;\n  }\n\n  return 'An unexpected error occurred. Please try again.';\n};\n\n// Export types\nexport type { SupabaseClient };\n","import { getSupabaseClient, handleSupabaseError } from './supabaseService';\n\n// User profile type\nexport interface UserProfile {\n  id: string;\n  email: string;\n  name?: string;\n  created_at: string;\n}\n\n// Sign up with email and password\nexport const signUp = async (email: string, password: string): Promise<void> => {\n  try {\n    const supabase = getSupabaseClient();\n    \n    const { error } = await supabase.auth.signUp({\n      email,\n      password,\n      options: {\n        emailRedirectTo: `${window.location.origin}/auth/callback`\n      }\n    });\n    \n    if (error) {\n      throw error;\n    }\n  } catch (error) {\n    throw new Error(handleSupabaseError(error));\n  }\n};\n\n// Sign in with email and password\nexport const signIn = async (email: string, password: string) => {\n  try {\n    const supabase = getSupabaseClient();\n    \n    const { data, error } = await supabase.auth.signInWithPassword({\n      email,\n      password\n    });\n    \n    if (error) {\n      throw error;\n    }\n    \n    return data;\n  } catch (error) {\n    throw new Error(handleSupabaseError(error));\n  }\n};\n\n// Sign out\nexport const signOut = async (): Promise<void> => {\n  try {\n    const supabase = getSupabaseClient();\n    \n    const { error } = await supabase.auth.signOut();\n    \n    if (error) {\n      throw error;\n    }\n  } catch (error) {\n    throw new Error(handleSupabaseError(error));\n  }\n};\n\n// Reset password\nexport const resetPassword = async (email: string): Promise<void> => {\n  try {\n    const supabase = getSupabaseClient();\n    \n    const { error } = await supabase.auth.resetPasswordForEmail(email, {\n      redirectTo: `${window.location.origin}/reset-password`\n    });\n    \n    if (error) {\n      throw error;\n    }\n  } catch (error) {\n    throw new Error(handleSupabaseError(error));\n  }\n};\n\n// Update password\nexport const updatePassword = async (newPassword: string): Promise<void> => {\n  try {\n    const supabase = getSupabaseClient();\n    \n    const { error } = await supabase.auth.updateUser({\n      password: newPassword\n    });\n    \n    if (error) {\n      throw error;\n    }\n  } catch (error) {\n    throw new Error(handleSupabaseError(error));\n  }\n};\n\n// Get current user profile\nexport const getCurrentUserProfile = async (): Promise<UserProfile | null> => {\n  try {\n    const supabase = getSupabaseClient();\n    \n    // Get current user\n    const { data: { user }, error: userError } = await supabase.auth.getUser();\n    \n    if (userError || !user) {\n      return null;\n    }\n    \n    // Get profile data\n    const { data: profile, error: profileError } = await supabase\n      .from('profiles')\n      .select('*')\n      .eq('id', user.id)\n      .single();\n    \n    if (profileError) {\n      console.error('Error fetching profile:', profileError);\n      // Return basic user info even if profile fetch fails\n      return {\n        id: user.id,\n        email: user.email || '',\n        created_at: user.created_at\n      };\n    }\n    \n    return {\n      id: user.id,\n      email: user.email || '',\n      name: profile?.name,\n      created_at: user.created_at\n    };\n  } catch (error) {\n    console.error('Error getting current user profile:', error);\n    return null;\n  }\n};\n\n// Update user profile\nexport const updateUserProfile = async (profile: Partial<UserProfile>): Promise<UserProfile> => {\n  try {\n    const supabase = getSupabaseClient();\n    \n    // Get current user\n    const { data: { user }, error: userError } = await supabase.auth.getUser();\n    \n    if (userError || !user) {\n      throw new Error('User not authenticated');\n    }\n    \n    // Update profile\n    const { data, error } = await supabase\n      .from('profiles')\n      .upsert({\n        id: user.id,\n        ...profile,\n        updated_at: new Date().toISOString()\n      })\n      .select()\n      .single();\n    \n    if (error) {\n      throw error;\n    }\n    \n    return {\n      id: user.id,\n      email: user.email || '',\n      name: data.name,\n      created_at: user.created_at\n    };\n  } catch (error) {\n    throw new Error(handleSupabaseError(error));\n  }\n};\n"],"names":["DEFAULT_SUPABASE_URL","DEFAULT_SUPABASE_ANON_KEY","getSupabaseUrl","_a","_b","getSupabaseAnonKey","supabaseInstance","getSupabaseClient","supabaseUrl","supabaseAnonKey","createClient","error","handleSupabaseError","signUp","email","password","supabase","signIn","data"],"mappings":"sCAGA,MAAMA,EAAuB,2CACvBC,EAA4B,mNAG5BC,EAAiB,IAAc,SAEnC,OAAI,OAAO,OAAW,OAAgBC,EAAA,OAAe,aAAf,MAAAA,EAA2B,cACvD,OAAe,WAAW,aAIhC,OAAO,OAAW,OAAgBC,EAAA,OAAe,MAAf,MAAAA,EAAoB,mBAChD,OAAe,IAAI,mBAQ7B,QAAQ,KAAK,gEAAgE,EACtEJ,EACT,EAEMK,EAAqB,IAAc,SAEvC,OAAI,OAAO,OAAW,OAAgBF,EAAA,OAAe,aAAf,MAAAA,EAA2B,mBACvD,OAAe,WAAW,kBAIhC,OAAO,OAAW,OAAgBC,EAAA,OAAe,MAAf,MAAAA,EAAoB,wBAChD,OAAe,IAAI,wBAQ7B,QAAQ,KAAK,qEAAqE,EAC3EH,EACT,EAGA,IAAIK,EAA0C,KAEvC,MAAMC,EAAoB,IAAsB,CACrD,GAAID,EACK,OAAAA,EAGL,GAAA,CACF,MAAME,EAAcN,EAAe,EAC7BO,EAAkBJ,EAAmB,EAExB,OAAAC,EAAAI,EAAaF,EAAaC,EAAiB,CAC5D,KAAM,CACJ,iBAAkB,GAClB,eAAgB,GAChB,mBAAoB,EACtB,EACA,OAAQ,CACN,QAAS,CACP,gBAAiB,gBAAA,CACnB,CACF,CACD,EAEMH,QACAK,EAAO,CACN,cAAA,MAAM,sCAAuCA,CAAK,EACpDA,CAAA,CAEV,EAGaC,EAAuBD,IAC1B,QAAA,MAAM,kBAAmBA,CAAK,EAElCA,EAAM,QACDA,EAAM,QAGXA,EAAM,kBACDA,EAAM,kBAGR,mDChFIE,EAAS,MAAOC,EAAeC,IAAoC,CAC1E,GAAA,CACF,MAAMC,EAAWT,EAAkB,EAE7B,CAAE,MAAAI,CAAM,EAAI,MAAMK,EAAS,KAAK,OAAO,CAC3C,MAAAF,EACA,SAAAC,EACA,QAAS,CACP,gBAAiB,GAAG,OAAO,SAAS,MAAM,gBAAA,CAC5C,CACD,EAED,GAAIJ,EACI,MAAAA,QAEDA,EAAO,CACd,MAAM,IAAI,MAAMC,EAAoBD,CAAK,CAAC,CAAA,CAE9C,EAGaM,EAAS,MAAOH,EAAeC,IAAqB,CAC3D,GAAA,CACF,MAAMC,EAAWT,EAAkB,EAE7B,CAAE,KAAAW,EAAM,MAAAP,CAAA,EAAU,MAAMK,EAAS,KAAK,mBAAmB,CAC7D,MAAAF,EACA,SAAAC,CAAA,CACD,EAED,GAAIJ,EACI,MAAAA,EAGD,OAAAO,QACAP,EAAO,CACd,MAAM,IAAI,MAAMC,EAAoBD,CAAK,CAAC,CAAA,CAE9C"}