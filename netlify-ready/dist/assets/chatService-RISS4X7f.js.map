{"version":3,"file":"chatService-RISS4X7f.js","sources":["../../src/services/supabaseClient.js","../../src/services/chatService.js"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\n\n// Default values for Supabase\nconst DEFAULT_SUPABASE_URL = 'https://anpmiebatvfzfexxzobr.supabase.co';\nconst DEFAULT_SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFucG1pZWJhdHZmemZleHh6b2JyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MTc0NTk5NzcsImV4cCI6MjAzMzAzNTk3N30.Nh0Qs9OYrOWrXyB-XUO9Oe_DwN_-LQPliMFlXEBUo8A';\n\n// Initialize the Supabase client\nconst supabaseUrl = import.meta.env?.VITE_SUPABASE_URL || DEFAULT_SUPABASE_URL;\nconst supabaseAnonKey = import.meta.env?.VITE_SUPABASE_ANON_KEY || DEFAULT_SUPABASE_ANON_KEY;\n\nconst supabase = createClient(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: true\n  },\n  global: {\n    headers: {\n      'X-Client-Info': 'EchoMind/1.0.0',\n    },\n  },\n});\n\n// Export a function to get a new client with a custom API key\nexport const getClientWithApiKey = (apiKey) => {\n  return createClient(supabaseUrl, apiKey);\n};\n\n// Export a function to get the current user\nexport const getCurrentUser = async () => {\n  const { data, error } = await supabase.auth.getUser();\n  if (error) {\n    console.error('Error getting current user:', error.message);\n    return null;\n  }\n  return data.user;\n};\n\n// Export a function to sign in with email and password\nexport const signInWithEmail = async (email, password) => {\n  const { data, error } = await supabase.auth.signInWithPassword({\n    email,\n    password,\n  });\n\n  if (error) {\n    console.error('Error signing in:', error.message);\n    throw error;\n  }\n\n  return data;\n};\n\n// Export a function to sign up with email and password\nexport const signUpWithEmail = async (email, password) => {\n  const { data, error } = await supabase.auth.signUp({\n    email,\n    password,\n  });\n\n  if (error) {\n    console.error('Error signing up:', error.message);\n    throw error;\n  }\n\n  return data;\n};\n\n// Export a function to sign out\nexport const signOut = async () => {\n  const { error } = await supabase.auth.signOut();\n\n  if (error) {\n    console.error('Error signing out:', error.message);\n    throw error;\n  }\n\n  return true;\n};\n\n// Export a function to reset password\nexport const resetPassword = async (email) => {\n  const { data, error } = await supabase.auth.resetPasswordForEmail(email, {\n    redirectTo: `${window.location.origin}/reset-password`,\n  });\n\n  if (error) {\n    console.error('Error resetting password:', error.message);\n    throw error;\n  }\n\n  return data;\n};\n\n// Export a function to update password\nexport const updatePassword = async (newPassword) => {\n  const { data, error } = await supabase.auth.updateUser({\n    password: newPassword,\n  });\n\n  if (error) {\n    console.error('Error updating password:', error.message);\n    throw error;\n  }\n\n  return data;\n};\n\n// Export a function to update user profile\nexport const updateProfile = async (profile) => {\n  const { data, error } = await supabase.auth.updateUser({\n    data: profile,\n  });\n\n  if (error) {\n    console.error('Error updating profile:', error.message);\n    throw error;\n  }\n\n  return data;\n};\n\n// Export a function to get session\nexport const getSession = async () => {\n  const { data, error } = await supabase.auth.getSession();\n\n  if (error) {\n    console.error('Error getting session:', error.message);\n    throw error;\n  }\n\n  return data.session;\n};\n\n// Export a function to listen for auth changes\nexport const onAuthStateChange = (callback) => {\n  return supabase.auth.onAuthStateChange(callback);\n};\n\n// Handle Supabase errors in a standardized way\nexport const handleSupabaseError = (error) => {\n  if (!error) return 'Unknown error';\n\n  console.error('Supabase error:', error);\n\n  if (error.message) {\n    return error.message;\n  }\n\n  if (error.error_description) {\n    return error.error_description;\n  }\n\n  return 'An unexpected error occurred';\n};\n\nexport default supabase;\n","import supabase from '../services/supabaseClient';\n\nexport const chat = {\n  /**\n   * Get all chat sessions for the current user\n   * @returns {Promise<Array>} Array of chat session objects\n   */\n  getChatSessions: async () => {\n    try {\n      const { data: user } = await supabase.auth.getUser();\n      if (!user) return [];\n\n      const { data, error } = await supabase\n        .from('chat_sessions')\n        .select('*')\n        .eq('user_id', user.id)\n        .order('updated_at', { ascending: false });\n\n      if (error) {\n        console.error('Error fetching chat sessions:', error.message);\n        throw error;\n      }\n\n      return data || [];\n    } catch (error) {\n      console.error('Error in getChatSessions:', error.message);\n      throw error;\n    }\n  },\n\n  /**\n   * Get a specific chat session by ID\n   * @param {string} id Chat session ID\n   * @returns {Promise<Object>} Chat session object\n   */\n  getChatSession: async (id) => {\n    try {\n      const { data, error } = await supabase\n        .from('chat_sessions')\n        .select('*')\n        .eq('id', id)\n        .single();\n\n      if (error) {\n        console.error('Error fetching chat session:', error.message);\n        throw error;\n      }\n\n      return data;\n    } catch (error) {\n      console.error('Error in getChatSession:', error.message);\n      throw error;\n    }\n  },\n\n  /**\n   * Get all messages for a chat session\n   * @param {string} sessionId Chat session ID\n   * @returns {Promise<Array>} Array of chat message objects\n   */\n  getChatMessages: async (sessionId) => {\n    try {\n      const { data, error } = await supabase\n        .from('chat_messages')\n        .select('*')\n        .eq('session_id', sessionId)\n        .order('created_at', { ascending: true });\n\n      if (error) {\n        console.error('Error fetching chat messages:', error.message);\n        throw error;\n      }\n\n      return data || [];\n    } catch (error) {\n      console.error('Error in getChatMessages:', error.message);\n      throw error;\n    }\n  },\n\n  /**\n   * Create a new chat session\n   * @param {Object} session Chat session object\n   * @returns {Promise<Object>} Created chat session object\n   */\n  createChatSession: async (session) => {\n    try {\n      const { data: user } = await supabase.auth.getUser();\n      if (!user) throw new Error('User not authenticated');\n\n      const { data, error } = await supabase\n        .from('chat_sessions')\n        .insert([{ ...session, user_id: user.id }])\n        .select()\n        .single();\n\n      if (error) {\n        console.error('Error creating chat session:', error.message);\n        throw error;\n      }\n\n      return data;\n    } catch (error) {\n      console.error('Error in createChatSession:', error.message);\n      throw error;\n    }\n  },\n\n  /**\n   * Send a message in a chat session\n   * @param {string} sessionId Chat session ID\n   * @param {string} content Message content\n   * @returns {Promise<Object>} Created message object\n   */\n  sendMessage: async (sessionId, content) => {\n    try {\n      const { data: user } = await supabase.auth.getUser();\n      if (!user) throw new Error('User not authenticated');\n\n      // Create the user message\n      const { data: userMessage, error: userMessageError } = await supabase\n        .from('chat_messages')\n        .insert([{\n          session_id: sessionId,\n          content,\n          role: 'user',\n          user_id: user.id\n        }])\n        .select()\n        .single();\n\n      if (userMessageError) {\n        console.error('Error sending user message:', userMessageError.message);\n        throw userMessageError;\n      }\n\n      // Update the chat session's last_message and updated_at\n      await supabase\n        .from('chat_sessions')\n        .update({\n          last_message: content,\n          updated_at: new Date()\n        })\n        .eq('id', sessionId);\n\n      return userMessage;\n    } catch (error) {\n      console.error('Error in sendMessage:', error.message);\n      throw error;\n    }\n  },\n\n  /**\n   * Delete a chat session\n   * @param {string} id Chat session ID\n   * @returns {Promise<boolean>} Success status\n   */\n  deleteChatSession: async (id) => {\n    try {\n      // Delete all messages in the session first\n      const { error: messagesError } = await supabase\n        .from('chat_messages')\n        .delete()\n        .eq('session_id', id);\n\n      if (messagesError) {\n        console.error('Error deleting chat messages:', messagesError.message);\n        throw messagesError;\n      }\n\n      // Then delete the session\n      const { error: sessionError } = await supabase\n        .from('chat_sessions')\n        .delete()\n        .eq('id', id);\n\n      if (sessionError) {\n        console.error('Error deleting chat session:', sessionError.message);\n        throw sessionError;\n      }\n\n      return true;\n    } catch (error) {\n      console.error('Error in deleteChatSession:', error.message);\n      throw error;\n    }\n  }\n};\n\nexport default chat;\n"],"names":["DEFAULT_SUPABASE_URL","DEFAULT_SUPABASE_ANON_KEY","supabaseUrl","supabaseAnonKey","supabase","createClient","chat","user","data","error","id","sessionId","session","content","userMessage","userMessageError","messagesError","sessionError"],"mappings":"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"}