{"version":3,"file":"Settings-BL0vxnmz.js","sources":["../../src/pages/Settings.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Typography,\n  Paper,\n  TextField,\n  Button,\n  Switch,\n  FormControlLabel,\n  Divider,\n  Alert,\n  CircularProgress,\n  Grid,\n  InputAdornment,\n  IconButton,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  DialogActions,\n  Snackbar,\n  useTheme,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails\n} from '@mui/material';\nimport {\n  Visibility,\n  VisibilityOff,\n  Save as SaveIcon,\n  Delete as DeleteIcon,\n  ExpandMore as ExpandMoreIcon,\n  Notifications as NotificationsIcon,\n  Security as SecurityIcon,\n  Palette as PaletteIcon,\n  Api as ApiIcon,\n  Download as DownloadIcon\n} from '@mui/icons-material';\nimport { useSupabase } from '../contexts/SupabaseContext';\nimport { useTheme as useAppTheme } from '../contexts/ThemeContext';\nimport MainLayout from '../layouts/MainLayout';\n\nconst Settings: React.FC = () => {\n  const { supabase, session } = useSupabase();\n  const { darkMode, toggleDarkMode } = useAppTheme();\n  const theme = useTheme();\n\n  const [loading, setLoading] = useState(false);\n  const [success, setSuccess] = useState<string | null>(null);\n  const [error, setError] = useState<string | null>(null);\n\n  // Profile settings\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n\n  // Password settings\n  const [currentPassword, setCurrentPassword] = useState('');\n  const [newPassword, setNewPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [showCurrentPassword, setShowCurrentPassword] = useState(false);\n  const [showNewPassword, setShowNewPassword] = useState(false);\n\n  // Notification settings\n  const [emailNotifications, setEmailNotifications] = useState(true);\n  const [reminderNotifications, setReminderNotifications] = useState(true);\n\n  // API Key settings\n  const [geminiApiKey, setGeminiApiKey] = useState('');\n  const [mistralApiKey, setMistralApiKey] = useState('');\n  const [useCustomGeminiApiKey, setUseCustomGeminiApiKey] = useState(false);\n  const [useCustomMistralApiKey, setUseCustomMistralApiKey] = useState(false);\n\n  // Delete account dialog\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [deleteConfirmText, setDeleteConfirmText] = useState('');\n\n  // Load user settings\n  useEffect(() => {\n    const loadUserSettings = async () => {\n      if (!session?.user) return;\n\n      try {\n        setLoading(true);\n\n        // This would be replaced with actual Supabase queries\n        // For profile data:\n        // const { data: profileData, error: profileError } = await supabase\n        //   .from('profiles')\n        //   .select('*')\n        //   .eq('id', session.user.id)\n        //   .single();\n\n        // For notification settings:\n        // const { data: notifData, error: notifError } = await supabase\n        //   .from('user_settings')\n        //   .select('*')\n        //   .eq('user_id', session.user.id)\n        //   .single();\n\n        // For API key:\n        // const { data: apiKeyData, error: apiKeyError } = await supabase\n        //   .from('user_api_keys')\n        //   .select('*')\n        //   .eq('user_id', session.user.id)\n        //   .single();\n\n        // For now, just use placeholder data\n        setName(session.user.email?.split('@')[0] || '');\n        setEmail(session.user.email || '');\n        setEmailNotifications(true);\n        setReminderNotifications(true);\n        setGeminiApiKey('');\n        setMistralApiKey('');\n        setUseCustomGeminiApiKey(false);\n        setUseCustomMistralApiKey(false);\n      } catch (error) {\n        console.error('Error loading user settings:', error);\n        setError('Failed to load user settings. Please try again.');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadUserSettings();\n  }, [session, supabase]);\n\n  const handleUpdateProfile = async () => {\n    if (!session?.user) return;\n\n    try {\n      setLoading(true);\n      setError(null);\n\n      // This would be replaced with actual Supabase update\n      // const { error } = await supabase\n      //   .from('profiles')\n      //   .update({ name })\n      //   .eq('id', session.user.id);\n\n      setSuccess('Profile updated successfully');\n      setTimeout(() => setSuccess(null), 3000);\n    } catch (error) {\n      console.error('Error updating profile:', error);\n      setError('Failed to update profile. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleChangePassword = async () => {\n    if (!session?.user) return;\n\n    if (newPassword !== confirmPassword) {\n      setError('New passwords do not match');\n      return;\n    }\n\n    if (newPassword.length < 6) {\n      setError('New password must be at least 6 characters long');\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError(null);\n\n      // This would be replaced with actual Supabase password update\n      // const { error } = await supabase.auth.updateUser({\n      //   password: newPassword\n      // });\n\n      setCurrentPassword('');\n      setNewPassword('');\n      setConfirmPassword('');\n      setSuccess('Password updated successfully');\n      setTimeout(() => setSuccess(null), 3000);\n    } catch (error) {\n      console.error('Error changing password:', error);\n      setError('Failed to change password. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleUpdateNotifications = async () => {\n    if (!session?.user) return;\n\n    try {\n      setLoading(true);\n      setError(null);\n\n      // This would be replaced with actual Supabase update\n      // const { error } = await supabase\n      //   .from('user_settings')\n      //   .update({\n      //     email_notifications: emailNotifications,\n      //     reminder_notifications: reminderNotifications\n      //   })\n      //   .eq('user_id', session.user.id);\n\n      setSuccess('Notification settings updated successfully');\n      setTimeout(() => setSuccess(null), 3000);\n    } catch (error) {\n      console.error('Error updating notification settings:', error);\n      setError('Failed to update notification settings. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleUpdateApiKey = async () => {\n    if (!session?.user) return;\n\n    try {\n      setLoading(true);\n      setError(null);\n\n      // This would be replaced with actual Supabase update\n      // const { error } = await supabase\n      //   .from('user_api_keys')\n      //   .upsert({\n      //     user_id: session.user.id,\n      //     gemini_api_key: geminiApiKey,\n      //     mistral_api_key: mistralApiKey,\n      //     use_custom_gemini_key: useCustomGeminiApiKey,\n      //     use_custom_mistral_key: useCustomMistralApiKey\n      //   });\n\n      setSuccess('API key settings updated successfully');\n      setTimeout(() => setSuccess(null), 3000);\n    } catch (error) {\n      console.error('Error updating API key settings:', error);\n      setError('Failed to update API key settings. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDeleteAccount = async () => {\n    if (!session?.user) return;\n\n    if (deleteConfirmText !== 'delete my account') {\n      setError('Please type \"delete my account\" to confirm');\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError(null);\n\n      // This would be replaced with actual Supabase delete\n      // First delete user data\n      // await supabase\n      //   .from('profiles')\n      //   .delete()\n      //   .eq('id', session.user.id);\n\n      // Then delete auth user\n      // await supabase.auth.admin.deleteUser(session.user.id);\n\n      // Sign out\n      // await supabase.auth.signOut();\n\n      setDeleteDialogOpen(false);\n      setSuccess('Account deleted successfully');\n      setTimeout(() => {\n        window.location.href = '/';\n      }, 2000);\n    } catch (error) {\n      console.error('Error deleting account:', error);\n      setError('Failed to delete account. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleExportData = async () => {\n    if (!session?.user) return;\n\n    try {\n      setLoading(true);\n\n      // This would be replaced with actual Supabase queries to get all user data\n      // const { data: journalData } = await supabase\n      //   .from('journal_entries')\n      //   .select('*')\n      //   .eq('user_id', session.user.id);\n\n      // const { data: chatData } = await supabase\n      //   .from('chat_messages')\n      //   .select('*')\n      //   .eq('user_id', session.user.id);\n\n      // For now, just use placeholder data\n      const userData = {\n        profile: {\n          name,\n          email\n        },\n        journals: [\n          { id: '1', title: 'Sample Journal', content: 'Sample content', created_at: new Date() }\n        ],\n        chats: [\n          { id: '1', message: 'Sample message', created_at: new Date() }\n        ]\n      };\n\n      // Create a downloadable JSON file\n      const dataStr = JSON.stringify(userData, null, 2);\n      const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);\n\n      const exportFileDefaultName = `echomind-data-${new Date().toISOString().split('T')[0]}.json`;\n\n      const linkElement = document.createElement('a');\n      linkElement.setAttribute('href', dataUri);\n      linkElement.setAttribute('download', exportFileDefaultName);\n      linkElement.click();\n\n      setSuccess('Data exported successfully');\n      setTimeout(() => setSuccess(null), 3000);\n    } catch (error) {\n      console.error('Error exporting data:', error);\n      setError('Failed to export data. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <MainLayout>\n      <Box>\n        <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n          Settings\n        </Typography>\n\n        <Typography variant=\"body1\" color=\"text.secondary\" paragraph>\n          Manage your account settings and preferences.\n        </Typography>\n\n        {error && (\n          <Alert severity=\"error\" sx={{ mb: 3 }}>\n            {error}\n          </Alert>\n        )}\n\n        {success && (\n          <Alert severity=\"success\" sx={{ mb: 3 }}>\n            {success}\n          </Alert>\n        )}\n\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <Accordion defaultExpanded>\n              <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n                <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                  <SecurityIcon sx={{ mr: 1 }} />\n                  <Typography variant=\"h6\">Account Settings</Typography>\n                </Box>\n              </AccordionSummary>\n              <AccordionDetails>\n                <Paper elevation={0} sx={{ p: 3 }}>\n                  <Typography variant=\"h6\" gutterBottom>\n                    Profile Information\n                  </Typography>\n\n                  <Grid container spacing={2}>\n                    <Grid item xs={12} sm={6}>\n                      <TextField\n                        fullWidth\n                        label=\"Name\"\n                        value={name}\n                        onChange={(e) => setName(e.target.value)}\n                        margin=\"normal\"\n                      />\n                    </Grid>\n                    <Grid item xs={12} sm={6}>\n                      <TextField\n                        fullWidth\n                        label=\"Email\"\n                        value={email}\n                        disabled\n                        margin=\"normal\"\n                        helperText=\"Email cannot be changed\"\n                      />\n                    </Grid>\n                  </Grid>\n\n                  <Box sx={{ mt: 2, display: 'flex', justifyContent: 'flex-end' }}>\n                    <Button\n                      variant=\"contained\"\n                      color=\"primary\"\n                      startIcon={loading ? <CircularProgress size={20} /> : <SaveIcon />}\n                      onClick={handleUpdateProfile}\n                      disabled={loading || !name.trim()}\n                    >\n                      Save Profile\n                    </Button>\n                  </Box>\n\n                  <Divider sx={{ my: 3 }} />\n\n                  <Typography variant=\"h6\" gutterBottom>\n                    Change Password\n                  </Typography>\n\n                  <TextField\n                    fullWidth\n                    label=\"Current Password\"\n                    type={showCurrentPassword ? 'text' : 'password'}\n                    value={currentPassword}\n                    onChange={(e) => setCurrentPassword(e.target.value)}\n                    margin=\"normal\"\n                    InputProps={{\n                      endAdornment: (\n                        <InputAdornment position=\"end\">\n                          <IconButton\n                            onClick={() => setShowCurrentPassword(!showCurrentPassword)}\n                            edge=\"end\"\n                          >\n                            {showCurrentPassword ? <VisibilityOff /> : <Visibility />}\n                          </IconButton>\n                        </InputAdornment>\n                      )\n                    }}\n                  />\n\n                  <TextField\n                    fullWidth\n                    label=\"New Password\"\n                    type={showNewPassword ? 'text' : 'password'}\n                    value={newPassword}\n                    onChange={(e) => setNewPassword(e.target.value)}\n                    margin=\"normal\"\n                    InputProps={{\n                      endAdornment: (\n                        <InputAdornment position=\"end\">\n                          <IconButton\n                            onClick={() => setShowNewPassword(!showNewPassword)}\n                            edge=\"end\"\n                          >\n                            {showNewPassword ? <VisibilityOff /> : <Visibility />}\n                          </IconButton>\n                        </InputAdornment>\n                      )\n                    }}\n                  />\n\n                  <TextField\n                    fullWidth\n                    label=\"Confirm New Password\"\n                    type={showNewPassword ? 'text' : 'password'}\n                    value={confirmPassword}\n                    onChange={(e) => setConfirmPassword(e.target.value)}\n                    margin=\"normal\"\n                    error={newPassword !== confirmPassword && confirmPassword !== ''}\n                    helperText={\n                      newPassword !== confirmPassword && confirmPassword !== ''\n                        ? 'Passwords do not match'\n                        : ''\n                    }\n                  />\n\n                  <Box sx={{ mt: 2, display: 'flex', justifyContent: 'flex-end' }}>\n                    <Button\n                      variant=\"contained\"\n                      color=\"primary\"\n                      onClick={handleChangePassword}\n                      disabled={\n                        loading ||\n                        !currentPassword ||\n                        !newPassword ||\n                        !confirmPassword ||\n                        newPassword !== confirmPassword\n                      }\n                    >\n                      Change Password\n                    </Button>\n                  </Box>\n                </Paper>\n              </AccordionDetails>\n            </Accordion>\n          </Grid>\n\n          <Grid item xs={12}>\n            <Accordion>\n              <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n                <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                  <PaletteIcon sx={{ mr: 1 }} />\n                  <Typography variant=\"h6\">Appearance</Typography>\n                </Box>\n              </AccordionSummary>\n              <AccordionDetails>\n                <Paper elevation={0} sx={{ p: 3 }}>\n                  <FormControlLabel\n                    control={\n                      <Switch\n                        checked={darkMode}\n                        onChange={toggleDarkMode}\n                        color=\"primary\"\n                      />\n                    }\n                    label=\"Dark Mode\"\n                  />\n                </Paper>\n              </AccordionDetails>\n            </Accordion>\n          </Grid>\n\n          <Grid item xs={12}>\n            <Accordion>\n              <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n                <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                  <NotificationsIcon sx={{ mr: 1 }} />\n                  <Typography variant=\"h6\">Notifications</Typography>\n                </Box>\n              </AccordionSummary>\n              <AccordionDetails>\n                <Paper elevation={0} sx={{ p: 3 }}>\n                  <FormControlLabel\n                    control={\n                      <Switch\n                        checked={emailNotifications}\n                        onChange={(e) => setEmailNotifications(e.target.checked)}\n                        color=\"primary\"\n                      />\n                    }\n                    label=\"Email Notifications\"\n                  />\n\n                  <Typography variant=\"body2\" color=\"text.secondary\" sx={{ ml: 4, mb: 2 }}>\n                    Receive email notifications about important updates and reminders.\n                  </Typography>\n\n                  <FormControlLabel\n                    control={\n                      <Switch\n                        checked={reminderNotifications}\n                        onChange={(e) => setReminderNotifications(e.target.checked)}\n                        color=\"primary\"\n                      />\n                    }\n                    label=\"Daily Reminders\"\n                  />\n\n                  <Typography variant=\"body2\" color=\"text.secondary\" sx={{ ml: 4, mb: 2 }}>\n                    Receive daily reminders to journal and respond to prompts.\n                  </Typography>\n\n                  <Box sx={{ mt: 2, display: 'flex', justifyContent: 'flex-end' }}>\n                    <Button\n                      variant=\"contained\"\n                      color=\"primary\"\n                      onClick={handleUpdateNotifications}\n                      disabled={loading}\n                    >\n                      Save Notification Settings\n                    </Button>\n                  </Box>\n                </Paper>\n              </AccordionDetails>\n            </Accordion>\n          </Grid>\n\n          <Grid item xs={12}>\n            <Accordion>\n              <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n                <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                  <ApiIcon sx={{ mr: 1 }} />\n                  <Typography variant=\"h6\">API Settings</Typography>\n                </Box>\n              </AccordionSummary>\n              <AccordionDetails>\n                <Paper elevation={0} sx={{ p: 3 }}>\n                  <Typography variant=\"h6\" gutterBottom>\n                    Gemini API Settings\n                  </Typography>\n\n                  <FormControlLabel\n                    control={\n                      <Switch\n                        checked={useCustomGeminiApiKey}\n                        onChange={(e) => setUseCustomGeminiApiKey(e.target.checked)}\n                        color=\"primary\"\n                      />\n                    }\n                    label=\"Use Custom Gemini API Key\"\n                  />\n\n                  <Typography variant=\"body2\" color=\"text.secondary\" sx={{ ml: 4, mb: 2 }}>\n                    Use your own Gemini API key instead of the shared one.\n                  </Typography>\n\n                  {useCustomGeminiApiKey && (\n                    <TextField\n                      fullWidth\n                      label=\"Gemini API Key\"\n                      value={geminiApiKey}\n                      onChange={(e) => setGeminiApiKey(e.target.value)}\n                      margin=\"normal\"\n                      helperText=\"Enter your Gemini API key from Google AI Studio\"\n                    />\n                  )}\n\n                  <Divider sx={{ my: 3 }} />\n\n                  <Typography variant=\"h6\" gutterBottom>\n                    Mistral API Settings\n                  </Typography>\n\n                  <FormControlLabel\n                    control={\n                      <Switch\n                        checked={useCustomMistralApiKey}\n                        onChange={(e) => setUseCustomMistralApiKey(e.target.checked)}\n                        color=\"primary\"\n                      />\n                    }\n                    label=\"Use Custom Mistral API Key\"\n                  />\n\n                  <Typography variant=\"body2\" color=\"text.secondary\" sx={{ ml: 4, mb: 2 }}>\n                    Use your own Mistral API key instead of the shared one.\n                  </Typography>\n\n                  {useCustomMistralApiKey && (\n                    <TextField\n                      fullWidth\n                      label=\"Mistral API Key\"\n                      value={mistralApiKey}\n                      onChange={(e) => setMistralApiKey(e.target.value)}\n                      margin=\"normal\"\n                      helperText=\"Enter your Mistral API key from Mistral AI platform\"\n                    />\n                  )}\n\n                  <Box sx={{ mt: 2, display: 'flex', justifyContent: 'flex-end' }}>\n                    <Button\n                      variant=\"contained\"\n                      color=\"primary\"\n                      onClick={handleUpdateApiKey}\n                      disabled={loading ||\n                        (useCustomGeminiApiKey && !geminiApiKey) ||\n                        (useCustomMistralApiKey && !mistralApiKey)}\n                    >\n                      Save API Settings\n                    </Button>\n                  </Box>\n                </Paper>\n              </AccordionDetails>\n            </Accordion>\n          </Grid>\n\n          <Grid item xs={12}>\n            <Accordion>\n              <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n                <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                  <DownloadIcon sx={{ mr: 1 }} />\n                  <Typography variant=\"h6\">Data Management</Typography>\n                </Box>\n              </AccordionSummary>\n              <AccordionDetails>\n                <Paper elevation={0} sx={{ p: 3 }}>\n                  <Button\n                    variant=\"outlined\"\n                    color=\"primary\"\n                    startIcon={<DownloadIcon />}\n                    onClick={handleExportData}\n                    disabled={loading || !session}\n                    sx={{ mb: 3 }}\n                  >\n                    Export Your Data\n                  </Button>\n\n                  <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\n                    Download all your data in JSON format, including journal entries, chat history, and settings.\n                  </Typography>\n\n                  <Divider sx={{ my: 3 }} />\n\n                  <Typography variant=\"h6\" color=\"error\" gutterBottom>\n                    Danger Zone\n                  </Typography>\n\n                  <Button\n                    variant=\"outlined\"\n                    color=\"error\"\n                    startIcon={<DeleteIcon />}\n                    onClick={() => setDeleteDialogOpen(true)}\n                    disabled={loading || !session}\n                  >\n                    Delete Account\n                  </Button>\n\n                  <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1 }}>\n                    Permanently delete your account and all associated data. This action cannot be undone.\n                  </Typography>\n                </Paper>\n              </AccordionDetails>\n            </Accordion>\n          </Grid>\n        </Grid>\n\n        {/* Delete Account Dialog */}\n        <Dialog\n          open={deleteDialogOpen}\n          onClose={() => setDeleteDialogOpen(false)}\n        >\n          <DialogTitle color=\"error\">Delete Account</DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              This action will permanently delete your account and all associated data. This cannot be undone.\n            </DialogContentText>\n            <DialogContentText sx={{ mt: 2 }}>\n              To confirm, please type \"delete my account\" below:\n            </DialogContentText>\n            <TextField\n              fullWidth\n              value={deleteConfirmText}\n              onChange={(e) => setDeleteConfirmText(e.target.value)}\n              margin=\"normal\"\n              variant=\"outlined\"\n              error={deleteConfirmText !== '' && deleteConfirmText !== 'delete my account'}\n            />\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={() => setDeleteDialogOpen(false)}>Cancel</Button>\n            <Button\n              color=\"error\"\n              onClick={handleDeleteAccount}\n              disabled={deleteConfirmText !== 'delete my account' || loading}\n            >\n              {loading ? <CircularProgress size={24} /> : 'Delete Account'}\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </Box>\n    </MainLayout>\n  );\n};\n\nexport default Settings;\n"],"names":["Settings","supabase","session","useSupabase","darkMode","toggleDarkMode","useAppTheme","useTheme","loading","setLoading","useState","success","setSuccess","error","setError","name","setName","email","setEmail","currentPassword","setCurrentPassword","newPassword","setNewPassword","confirmPassword","setConfirmPassword","showCurrentPassword","setShowCurrentPassword","showNewPassword","setShowNewPassword","emailNotifications","setEmailNotifications","reminderNotifications","setReminderNotifications","geminiApiKey","setGeminiApiKey","mistralApiKey","setMistralApiKey","useCustomGeminiApiKey","setUseCustomGeminiApiKey","useCustomMistralApiKey","setUseCustomMistralApiKey","deleteDialogOpen","setDeleteDialogOpen","deleteConfirmText","setDeleteConfirmText","useEffect","_a","handleUpdateProfile","handleChangePassword","handleUpdateNotifications","handleUpdateApiKey","handleDeleteAccount","handleExportData","dataStr","dataUri","exportFileDefaultName","linkElement","jsx","MainLayout","jsxs","Box","Typography","Alert","Grid","Accordion","AccordionSummary","ExpandMoreIcon","SecurityIcon","AccordionDetails","Paper","TextField","e","Button","CircularProgress","SaveIcon","Divider","InputAdornment","IconButton","VisibilityOff","Visibility","PaletteIcon","FormControlLabel","Switch","NotificationsIcon","ApiIcon","DownloadIcon","DeleteIcon","Dialog","DialogTitle","DialogContent","DialogContentText","DialogActions"],"mappings":"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"}