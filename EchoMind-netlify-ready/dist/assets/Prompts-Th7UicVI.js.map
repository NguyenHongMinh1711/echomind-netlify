{"version":3,"file":"Prompts-Th7UicVI.js","sources":["../../src/pages/Prompts.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Typography,\n  Paper,\n  TextField,\n  Button,\n  Card,\n  CardContent,\n  CardActions,\n  Grid,\n  Divider,\n  CircularProgress,\n  Chip,\n  useTheme,\n  IconButton\n} from '@mui/material';\nimport {\n  Send as SendIcon,\n  History as HistoryIcon,\n  Refresh as RefreshIcon,\n  FormatQuote as QuoteIcon,\n  Bookmark as BookmarkIcon,\n  BookmarkBorder as BookmarkBorderIcon,\n  Delete as DeleteIcon\n} from '@mui/icons-material';\nimport { useSupabase } from '../contexts/SupabaseContext';\nimport MainLayout from '../layouts/MainLayout';\n\n// Prompt response interface\ninterface PromptResponse {\n  id: string;\n  prompt: string;\n  response: string;\n  created_at: Date;\n  is_bookmarked: boolean;\n}\n\nconst Prompts: React.FC = () => {\n  const { supabase, session } = useSupabase();\n  const theme = useTheme();\n\n  const [currentPrompt, setCurrentPrompt] = useState('');\n  const [response, setResponse] = useState('');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [showHistory, setShowHistory] = useState(false);\n  const [promptHistory, setPromptHistory] = useState<PromptResponse[]>([]);\n\n  // Load current prompt and history\n  useEffect(() => {\n    const loadPromptData = async () => {\n      try {\n        setIsLoading(true);\n\n        // For now, just use placeholder data\n        setCurrentPrompt('What are three things you are grateful for today?');\n\n        const placeholderHistory: PromptResponse[] = [\n          {\n            id: '1',\n            prompt: 'What is one small step you can take today to improve your mood?',\n            response: 'I can take a 15-minute walk outside to get some fresh air and sunlight.',\n            created_at: new Date(Date.now() - 86400000),\n            is_bookmarked: true\n          },\n          {\n            id: '2',\n            prompt: 'Describe a moment when you felt proud of yourself recently.',\n            response: 'I felt proud when I finished that difficult project at work despite all the challenges.',\n            created_at: new Date(Date.now() - 172800000),\n            is_bookmarked: false\n          }\n        ];\n\n        setPromptHistory(placeholderHistory);\n      } catch (error) {\n        console.error('Error loading prompt data:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadPromptData();\n  }, []);\n\n  const handleSubmitResponse = async () => {\n    if (!response.trim()) return;\n\n    try {\n      setIsSubmitting(true);\n\n      // This would be replaced with actual Supabase insert\n      // const { error } = await supabase\n      //   .from('prompt_responses')\n      //   .insert([{\n      //     prompt: currentPrompt,\n      //     response,\n      //     user_id: session.user.id\n      //   }]);\n\n      // Add to history\n      const newResponse: PromptResponse = {\n        id: Date.now().toString(),\n        prompt: currentPrompt,\n        response,\n        created_at: new Date(),\n        is_bookmarked: false\n      };\n\n      setPromptHistory(prev => [newResponse, ...prev]);\n      setResponse('');\n      setShowHistory(true);\n    } catch (error) {\n      console.error('Error submitting prompt response:', error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleRefreshPrompt = async () => {\n    try {\n      setIsLoading(true);\n\n      // This would be replaced with actual Supabase query\n      // const { data, error } = await supabase\n      //   .from('daily_prompts')\n      //   .select('*')\n      //   .order('created_at', { ascending: false })\n      //   .limit(5);\n\n      // For now, just rotate through some sample prompts\n      const samplePrompts = [\n        'What are three things you are grateful for today?',\n        'Describe a challenge you are facing and one step you can take to address it.',\n        'What is something kind you can do for yourself today?',\n        'Reflect on a recent positive interaction you had with someone.',\n        'What is one thing you are looking forward to this week?'\n      ];\n\n      const randomIndex = Math.floor(Math.random() * samplePrompts.length);\n      setCurrentPrompt(samplePrompts[randomIndex]);\n      setResponse('');\n    } catch (error) {\n      console.error('Error refreshing prompt:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleToggleBookmark = async (id: string) => {\n    // No need to check for user session in demo\n\n    try {\n      // This would be replaced with actual Supabase update\n      // const { error } = await supabase\n      //   .from('prompt_responses')\n      //   .update({ is_bookmarked: !promptHistory.find(p => p.id === id)?.is_bookmarked })\n      //   .eq('id', id);\n\n      setPromptHistory(prev =>\n        prev.map(item =>\n          item.id === id\n            ? { ...item, is_bookmarked: !item.is_bookmarked }\n            : item\n        )\n      );\n    } catch (error) {\n      console.error('Error toggling bookmark:', error);\n    }\n  };\n\n  const handleDeletePromptResponse = async (id: string) => {\n    if (!window.confirm('Are you sure you want to delete this reflection? This action cannot be undone.')) {\n      return;\n    }\n\n    try {\n      // This would be replaced with actual Supabase delete\n      // const { error } = await supabase\n      //   .from('prompt_responses')\n      //   .delete()\n      //   .eq('id', id);\n\n      // Remove from local state\n      setPromptHistory(prev => prev.filter(item => item.id !== id));\n    } catch (error) {\n      console.error('Error deleting prompt response:', error);\n    }\n  };\n\n  return (\n    <MainLayout>\n      <Box>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n          <Typography variant=\"h4\" component=\"h1\">\n            Daily Prompts\n          </Typography>\n          <Box>\n            <Button\n              variant={showHistory ? 'outlined' : 'contained'}\n              color=\"primary\"\n              startIcon={<HistoryIcon />}\n              onClick={() => setShowHistory(!showHistory)}\n              sx={{ mr: 1 }}\n            >\n              {showHistory ? 'Hide History' : 'Show History'}\n            </Button>\n            <Button\n              variant=\"outlined\"\n              color=\"primary\"\n              startIcon={<RefreshIcon />}\n              onClick={handleRefreshPrompt}\n              disabled={isLoading}\n            >\n              New Prompt\n            </Button>\n          </Box>\n        </Box>\n\n        <Typography variant=\"body1\" color=\"text.secondary\" paragraph>\n          Respond to daily reflection prompts to practice mindfulness and self-awareness.\n        </Typography>\n\n        {!showHistory && (\n          <Paper\n            elevation={3}\n            sx={{\n              p: 3,\n              mb: 4,\n              backgroundColor: theme.palette.mode === 'dark'\n                ? 'rgba(74, 111, 165, 0.1)'\n                : 'rgba(74, 111, 165, 0.05)'\n            }}\n          >\n            {isLoading ? (\n              <Box sx={{ display: 'flex', justifyContent: 'center', py: 4 }}>\n                <CircularProgress />\n              </Box>\n            ) : (\n              <>\n                <Box sx={{ display: 'flex', mb: 2 }}>\n                  <QuoteIcon color=\"primary\" sx={{ mr: 1, fontSize: 30 }} />\n                  <Typography variant=\"h5\" component=\"h2\" gutterBottom>\n                    {currentPrompt}\n                  </Typography>\n                </Box>\n\n                <TextField\n                  fullWidth\n                  multiline\n                  rows={6}\n                  placeholder=\"Type your response here...\"\n                  value={response}\n                  onChange={(e) => setResponse(e.target.value)}\n                  variant=\"outlined\"\n                  sx={{ mb: 2 }}\n                />\n\n                <Box sx={{ display: 'flex', justifyContent: 'flex-end' }}>\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    endIcon={isSubmitting ? <CircularProgress size={20} /> : <SendIcon />}\n                    onClick={handleSubmitResponse}\n                    disabled={!response.trim() || isSubmitting}\n                  >\n                    Submit\n                  </Button>\n                </Box>\n              </>\n            )}\n          </Paper>\n        )}\n\n        {showHistory && (\n          <>\n            <Typography variant=\"h5\" component=\"h2\" gutterBottom>\n              Your Reflection History\n            </Typography>\n\n            {promptHistory.length === 0 ? (\n              <Paper sx={{ p: 3, textAlign: 'center' }}>\n                <Typography variant=\"body1\">\n                  You haven't responded to any prompts yet.\n                </Typography>\n              </Paper>\n            ) : (\n              <Grid container spacing={3}>\n                {promptHistory.map((item) => (\n                  <Grid item xs={12} key={item.id}>\n                    <Card elevation={2}>\n                      <CardContent>\n                        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>\n                          <Box sx={{ display: 'flex', mb: 1 }}>\n                            <QuoteIcon color=\"primary\" sx={{ mr: 1 }} />\n                            <Typography variant=\"h6\" component=\"h3\">\n                              {item.prompt}\n                            </Typography>\n                          </Box>\n                          <Chip\n                            label={item.created_at.toLocaleDateString()}\n                            size=\"small\"\n                            variant=\"outlined\"\n                          />\n                        </Box>\n\n                        <Divider sx={{ my: 1 }} />\n\n                        <Typography variant=\"body1\" paragraph>\n                          {item.response}\n                        </Typography>\n                      </CardContent>\n                      <CardActions sx={{ justifyContent: 'flex-end' }}>\n                        <IconButton\n                          color=\"error\"\n                          onClick={() => handleDeletePromptResponse(item.id)}\n                          title=\"Delete this reflection\"\n                        >\n                          <DeleteIcon />\n                        </IconButton>\n                        <IconButton\n                          color={item.is_bookmarked ? 'primary' : 'default'}\n                          onClick={() => handleToggleBookmark(item.id)}\n                          title={item.is_bookmarked ? 'Remove bookmark' : 'Bookmark this reflection'}\n                        >\n                          {item.is_bookmarked ? <BookmarkIcon /> : <BookmarkBorderIcon />}\n                        </IconButton>\n                      </CardActions>\n                    </Card>\n                  </Grid>\n                ))}\n              </Grid>\n            )}\n          </>\n        )}\n      </Box>\n    </MainLayout>\n  );\n};\n\nexport default Prompts;\n"],"names":["Prompts","supabase","session","useSupabase","theme","useTheme","currentPrompt","setCurrentPrompt","useState","response","setResponse","isSubmitting","setIsSubmitting","isLoading","setIsLoading","showHistory","setShowHistory","promptHistory","setPromptHistory","useEffect","placeholderHistory","error","handleSubmitResponse","newResponse","prev","handleRefreshPrompt","samplePrompts","randomIndex","handleToggleBookmark","id","item","handleDeletePromptResponse","jsx","MainLayout","jsxs","Box","Typography","Button","HistoryIcon","RefreshIcon","Paper","CircularProgress","Fragment","QuoteIcon","TextField","e","SendIcon","Grid","Card","CardContent","Chip","Divider","CardActions","IconButton","DeleteIcon","BookmarkIcon","BookmarkBorderIcon"],"mappings":"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"}