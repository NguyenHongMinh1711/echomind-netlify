{"version":3,"file":"Chat-QUk2HXLM.js","sources":["../../src/utils/simpleMistralClient.js","../../src/pages/Chat.tsx"],"sourcesContent":["// Simple Mistral API client for EchoMind\n// This is a simplified version that focuses on reliability\n\n// Hardcoded API key - in a real app, this would be stored securely\nconst MISTRAL_API_KEY = '05HuhddoS0bpO42IaPDvXiWizFtnbP6N';\n\n// Mistral API endpoint\nconst MISTRAL_API_ENDPOINT = 'https://api.mistral.ai/v1/chat/completions';\n\n// Fallback responses for when the API is unavailable\nconst FALLBACK_RESPONSES = [\n  \"I understand you're going through a difficult time. Would you like to talk more about what's troubling you?\",\n  \"It sounds like you're dealing with a lot right now. Remember that it's okay to take things one step at a time.\",\n  \"I'm here to support you through this. What would be most helpful for you right now?\",\n  \"It's brave of you to share your feelings. Have you considered talking to a mental health professional about this?\",\n  \"Deep breathing can sometimes help in moments of stress. Would you like to try a quick breathing exercise?\"\n];\n\n/**\n * Get a random fallback response\n * @returns A random response from the fallback responses\n */\nconst getFallbackResponse = () => {\n  const randomIndex = Math.floor(Math.random() * FALLBACK_RESPONSES.length);\n  return FALLBACK_RESPONSES[randomIndex];\n};\n\n/**\n * Send a message to Mistral API and get a response\n * @param {string} message - The message to send to Mistral\n * @param {Array} conversationHistory - Optional conversation history for context\n * @returns {Promise<string>} - The response from Mistral or a fallback response\n */\nexport const sendMessageToMistral = async (message, conversationHistory = []) => {\n  try {\n    // Build messages array for the API\n    const messages = [\n      {\n        role: 'system',\n        content: `You are EchoMind, a mental health support assistant.\n        Your goal is to provide empathetic, supportive responses to users who may be\n        experiencing mental health challenges like depression or anxiety.\n\n        Guidelines:\n        - Be empathetic and supportive, but don't try to diagnose\n        - Suggest healthy coping strategies when appropriate\n        - Encourage professional help for serious concerns\n        - Keep responses concise (2-3 paragraphs maximum)\n        - Be conversational and warm`\n      },\n      ...conversationHistory,\n      {\n        role: 'user',\n        content: message\n      }\n    ];\n\n    // Make API call\n    const response = await fetch(MISTRAL_API_ENDPOINT, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${MISTRAL_API_KEY}`\n      },\n      body: JSON.stringify({\n        model: 'mistral-small',\n        messages,\n        temperature: 0.7,\n        top_p: 0.95,\n        max_tokens: 1024\n      })\n    });\n\n    // If response is not OK, use fallback\n    if (!response.ok) {\n      console.error('Mistral API error:', response.status, response.statusText);\n      return getFallbackResponse();\n    }\n\n    // Parse response\n    const data = await response.json();\n    \n    // If no valid choices, use fallback\n    if (!data.choices || data.choices.length === 0 || !data.choices[0].message?.content) {\n      console.error('Invalid Mistral API response:', data);\n      return getFallbackResponse();\n    }\n\n    // Return the content\n    return data.choices[0].message.content;\n  } catch (error) {\n    // For any error, use fallback\n    console.error('Error calling Mistral API:', error);\n    return getFallbackResponse();\n  }\n};\n\nexport default {\n  sendMessageToMistral\n};\n","import React, { useState, useRef, useEffect } from 'react';\nimport {\n  Box,\n  Typography,\n  TextField,\n  Button,\n  Paper,\n  List,\n  ListItem,\n  ListItemText,\n  CircularProgress,\n  Divider,\n  IconButton,\n  useTheme,\n  Alert,\n  Snackbar\n} from '@mui/material';\nimport { Send as SendIcon, Delete as DeleteIcon, History as HistoryIcon } from '@mui/icons-material';\nimport { useSupabase } from '../contexts/SupabaseContext';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport MainLayout from '../layouts/MainLayout';\nimport { sendMessageToMistral } from '../utils/simpleMistralClient';\nimport { chat } from '../services/chatService';\n\nconst Chat: React.FC = () => {\n  const { supabase, session } = useSupabase();\n  const theme = useTheme();\n  const navigate = useNavigate();\n  const { conversationId } = useParams<{ conversationId?: string }>();\n  const [message, setMessage] = useState('');\n  // Local message type with Date object for timestamp\n  interface LocalMessage {\n    id: string;\n    text: string;\n    sender: 'user' | 'assistant';\n    timestamp: Date;\n    session_id?: string;\n  }\n\n  const [messages, setMessages] = useState<LocalMessage[]>([]);\n  const [currentConversationId, setCurrentConversationId] = useState<string | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  // Scroll to bottom of messages\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  // Load chat history\n  useEffect(() => {\n    const loadChatHistory = async () => {\n      try {\n        setLoading(true);\n\n        if (conversationId && conversationId !== 'new') {\n          // Load existing conversation\n          setCurrentConversationId(conversationId);\n\n          try {\n            const chatMessages = await chat.getChatMessages(conversationId);\n\n            // Convert to local message format\n            const localMessages: LocalMessage[] = chatMessages.map(msg => ({\n              id: msg.id,\n              text: msg.content,\n              sender: msg.role,\n              timestamp: new Date(msg.timestamp),\n              session_id: msg.session_id\n            }));\n\n            setMessages(localMessages);\n          } catch (error) {\n            console.error('Error loading messages:', error);\n            setError('Failed to load conversation messages');\n          }\n        } else {\n          // Create a new conversation if needed\n          try {\n            if (!session?.user) {\n              // If not logged in, use a placeholder conversation\n              setCurrentConversationId('placeholder-conversation');\n            } else {\n              // Create a new conversation in the database\n              const newConversation = await chat.createChatSession({ title: 'New Conversation' });\n              setCurrentConversationId(newConversation.id);\n            }\n\n            // Set welcome message\n            setMessages([\n              {\n                id: 'welcome',\n                text: 'Hello! How can I help you today?',\n                sender: 'assistant',\n                timestamp: new Date(),\n                session_id: currentConversationId || undefined\n              }\n            ]);\n          } catch (error) {\n            console.error('Error creating conversation:', error);\n            setError('Failed to create a new conversation');\n\n            // Fallback to placeholder\n            setCurrentConversationId('placeholder-conversation');\n            setMessages([\n              {\n                id: 'welcome',\n                text: 'Hello! How can I help you today?',\n                sender: 'assistant',\n                timestamp: new Date(),\n                session_id: 'placeholder-conversation'\n              }\n            ]);\n          }\n        }\n      } catch (error) {\n        console.error('Error loading chat history:', error);\n        setError('Failed to load chat history');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadChatHistory();\n  }, [conversationId, session]);\n\n  const handleSendMessage = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!message.trim() || !currentConversationId) return;\n\n    // Add user message to UI immediately for better UX\n    const userMessage: LocalMessage = {\n      id: `user-${Date.now()}`,\n      text: message,\n      sender: 'user',\n      timestamp: new Date(),\n      session_id: currentConversationId\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setMessage('');\n    setLoading(true);\n\n    try {\n      // Get conversation history for context (last 6 messages)\n      const conversationHistory = messages.slice(-6).map(msg => ({\n        role: msg.sender === 'user' ? 'user' : 'assistant',\n        content: msg.text\n      }));\n\n      // Call Mistral API\n      const mistralResponse = await sendMessageToMistral(message, conversationHistory);\n\n      // Add AI response to UI\n      const aiResponse: LocalMessage = {\n        id: `ai-${Date.now()}`,\n        text: mistralResponse,\n        sender: 'assistant',\n        timestamp: new Date(),\n        session_id: currentConversationId\n      };\n\n      setMessages(prev => [...prev, aiResponse]);\n    } catch (error) {\n      console.error('Error in chat:', error);\n\n      // Add error message to UI\n      const errorResponse: LocalMessage = {\n        id: `error-${Date.now()}`,\n        text: 'Sorry, I encountered an error. Please try again.',\n        sender: 'assistant',\n        timestamp: new Date(),\n        session_id: currentConversationId\n      };\n\n      setMessages(prev => [...prev, errorResponse]);\n      setError('Failed to get response from AI. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleClearChat = async () => {\n    if (!currentConversationId) return;\n\n    if (window.confirm('Are you sure you want to clear the chat history? This will delete the current conversation.')) {\n      try {\n        setLoading(true);\n\n        // Reset conversation\n        setCurrentConversationId('placeholder-conversation');\n\n        // Reset messages with welcome message\n        setMessages([\n          {\n            id: 'welcome',\n            text: 'Hello! How can I help you today?',\n            sender: 'assistant',\n            timestamp: new Date(),\n            session_id: 'placeholder-conversation'\n          }\n        ]);\n      } catch (error) {\n        console.error('Error clearing chat:', error);\n      } finally {\n        setLoading(false);\n      }\n    }\n  };\n\n  // Handle closing error snackbar\n  const handleCloseError = () => {\n    setError(null);\n  };\n\n  const handleViewHistory = () => {\n    navigate('/chat/history');\n  };\n\n  // Loading indicator\n  if (loading) {\n    return (\n      <MainLayout>\n        <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '50vh' }}>\n          <CircularProgress size={60} />\n        </Box>\n      </MainLayout>\n    );\n  }\n\n  return (\n    <MainLayout>\n      <Box sx={{ height: 'calc(100vh - 120px)', display: 'flex', flexDirection: 'column' }}>\n        {/* Error Snackbar */}\n        <Snackbar\n          open={!!error}\n          autoHideDuration={6000}\n          onClose={handleCloseError}\n          anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n        >\n          <Alert onClose={handleCloseError} severity=\"error\" sx={{ width: '100%' }}>\n            {error}\n          </Alert>\n        </Snackbar>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n          <Typography variant=\"h4\" component=\"h1\">\n            Chat Support\n          </Typography>\n          <Box sx={{ display: 'flex', gap: 1 }}>\n            <Button\n              variant=\"outlined\"\n              color=\"primary\"\n              startIcon={<HistoryIcon />}\n              onClick={handleViewHistory}\n              title=\"View chat history\"\n            >\n              History\n            </Button>\n            <IconButton\n              color=\"error\"\n              onClick={handleClearChat}\n              disabled={messages.length === 0}\n              title=\"Clear chat history\"\n            >\n              <DeleteIcon />\n            </IconButton>\n          </Box>\n        </Box>\n\n        <Typography variant=\"body1\" color=\"text.secondary\" paragraph>\n          Talk with our AI assistant for emotional support and guidance.\n        </Typography>\n\n        <Paper\n          elevation={3}\n          sx={{\n            flexGrow: 1,\n            mb: 2,\n            p: 2,\n            overflow: 'auto',\n            bgcolor: theme.palette.mode === 'dark' ? 'rgba(255, 255, 255, 0.05)' : 'rgba(0, 0, 0, 0.02)'\n          }}\n        >\n          {messages.length === 0 ? (\n            <Box sx={{\n              height: '100%',\n              display: 'flex',\n              flexDirection: 'column',\n              justifyContent: 'center',\n              alignItems: 'center',\n              color: 'text.secondary'\n            }}>\n              <Typography variant=\"body1\" align=\"center\">\n                No messages yet. Start a conversation!\n              </Typography>\n            </Box>\n          ) : (\n            <List>\n              {messages.map((msg, index) => (\n                <React.Fragment key={msg.id}>\n                  <ListItem\n                    alignItems=\"flex-start\"\n                    sx={{\n                      flexDirection: msg.sender === 'user' ? 'row-reverse' : 'row',\n                      px: 1\n                    }}\n                  >\n                    <Paper\n                      elevation={1}\n                      sx={{\n                        p: 2,\n                        maxWidth: '80%',\n                        bgcolor: msg.sender === 'user'\n                          ? theme.palette.primary.main\n                          : theme.palette.mode === 'dark'\n                            ? 'rgba(255, 255, 255, 0.1)'\n                            : 'rgba(0, 0, 0, 0.05)',\n                        color: msg.sender === 'user'\n                          ? theme.palette.primary.contrastText\n                          : 'text.primary'\n                      }}\n                    >\n                      <ListItemText\n                        primary={msg.text}\n                        secondary={msg.timestamp.toLocaleTimeString()}\n                        secondaryTypographyProps={{\n                          color: msg.sender === 'user' ? 'rgba(255, 255, 255, 0.7)' : 'text.secondary',\n                          fontSize: '0.75rem'\n                        }}\n                      />\n                    </Paper>\n                  </ListItem>\n                  {index < messages.length - 1 && (\n                    <Box sx={{ my: 1 }} />\n                  )}\n                </React.Fragment>\n              ))}\n              <div ref={messagesEndRef} />\n            </List>\n          )}\n        </Paper>\n\n        <Box component=\"form\" onSubmit={handleSendMessage} sx={{ display: 'flex', gap: 1 }}>\n          <TextField\n            fullWidth\n            placeholder=\"Type your message...\"\n            value={message}\n            onChange={(e) => setMessage(e.target.value)}\n            disabled={loading}\n            variant=\"outlined\"\n            size=\"medium\"\n            autoComplete=\"off\"\n          />\n          <Button\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n            disabled={!message.trim() || loading}\n            sx={{ minWidth: '100px' }}\n            endIcon={loading ? <CircularProgress size={20} color=\"inherit\" /> : <SendIcon />}\n          >\n            Send\n          </Button>\n        </Box>\n      </Box>\n    </MainLayout>\n  );\n};\n\nexport default Chat;\n"],"names":["MISTRAL_API_KEY","MISTRAL_API_ENDPOINT","FALLBACK_RESPONSES","getFallbackResponse","randomIndex","sendMessageToMistral","message","conversationHistory","messages","response","data","_a","error","Chat","supabase","session","useSupabase","theme","useTheme","navigate","useNavigate","conversationId","useParams","setMessage","useState","setMessages","currentConversationId","setCurrentConversationId","loading","setLoading","setError","messagesEndRef","useRef","scrollToBottom","useEffect","localMessages","chat","msg","newConversation","handleSendMessage","e","userMessage","prev","mistralResponse","aiResponse","errorResponse","handleClearChat","handleCloseError","handleViewHistory","jsx","MainLayout","Box","CircularProgress","jsxs","Snackbar","Alert","Typography","Button","HistoryIcon","IconButton","DeleteIcon","Paper","List","index","React","ListItem","ListItemText","TextField","SendIcon"],"mappings":"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"}